<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>


<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>深入浅出理解递归</title>
    <url>/2020/10/22/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<p>由浅入深理解递归，让你再也不用看到递归就头疼</p>
<a id="more"></a>


<h3 id="递归的三大要素"><a href="#递归的三大要素" class="headerlink" title="递归的三大要素"></a>递归的三大要素</h3><p>​    1.明确递归函数的作用</p>
<p>​        比如我们要算n的阶乘，定义函数如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//返回值为整形，即n得阶乘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    2.寻找递归的结束条件</p>
<p>​        递归是自己调用自己，所以我们必须要找一个退出条件，不然会一直调用自己，直到溢出，也就是要考虑当参数是啥时，我们需要把结果返回。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int f(int n)&#123;</span><br><span class="line">	if(n&lt;&#x3D;2)&#123;</span><br><span class="line">		return n;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    3.找出函数的等价关系式</p>
<p>​        我们要寻找一个等价关系式，不断得缩小问题得规模，例如<code>f(n)=n*f(n-1)</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(n-<span class="number">1</span>)*n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归和递推"><a href="#递归和递推" class="headerlink" title="递归和递推"></a>递归和递推</h3><p>1.递归：递归是从上到下往下递归的，直到递归到最底层，再一层一层把值返回，不过，当n比较大的时候，例如当n=10000，那么栈空间可能会不够用。</p>
<p>2.递推：因此，对于这种问题，我们可以考虑用自底向上的做法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> f2=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum=f1+f2;</span><br><span class="line">        f1=f2;</span><br><span class="line">        f2=sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="举例论证"><a href="#举例论证" class="headerlink" title="举例论证"></a>举例论证</h3><h4 id="案例1：斐波那契数列"><a href="#案例1：斐波那契数列" class="headerlink" title="案例1：斐波那契数列"></a>案例1：斐波那契数列</h4><p>波那契数列的是这样一个数列：1、1、2、3、5、8、13、21、34….，即第一项 f(1) = 1,第二项 f(2) = 1…..,第 n 项目为 f(n) = f(n-1) + f(n-2)。求第 n 项的值是多少。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//函数的功能，返回值是第n项的值</span></span><br><span class="line">    <span class="keyword">if</span>（n《=<span class="number">2</span>）&#123;<span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>)；<span class="comment">//等价关系式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例2：反转单链表"><a href="#案例2：反转单链表" class="headerlink" title="案例2：反转单链表"></a>案例2：反转单链表</h4><p> 例如链表为：1-&gt;2-&gt;3-&gt;4，反转后为 4-&gt;3-&gt;2-&gt;1 ，返回值为反转后链表头结点。</p>
<p>递归解题思路：</p>
<p>​    1.使用递归函数，一直递归到链表的最后一个结点，该节点就是反转后的头结点，记作newHead</p>
<p>​    2.每次函数在返回的过程中，让当前结点的下一个结点的next指针指向当前结点</p>
<p>​    3.同时让当前结点的next指针指向null，从而实现链表的局部反转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span></span>&#123;<span class="comment">//函数功能，返回反转链表的头结点</span></span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead=reverseList(head.next);</span><br><span class="line">    head.next.next=head;</span><br><span class="line">    head.next=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\zfc\AppData\Roaming\Typora\typora-user-images\1602312993501.png" style="float:left"></img></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.求解递归问题的时候，一定不要深入函数内部去细想，不然搞来搞去就把自己搞凌乱了，我们只需要关注一层递归就好。</p>
<p>2.用递归求解问题的时候，可能会重复计算冗余的子问题，这个时候不进行优化的话，效率就提升不上去。</p>
<p><img src="C:\Users\zfc\AppData\Roaming\Typora\typora-user-images\1602313561856.png" style="float:left"></img></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
</search>
